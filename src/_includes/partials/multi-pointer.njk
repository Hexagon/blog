<script>
    document.addEventListener("DOMContentLoaded", function(event) {
        const ws = new WebSocket("wss://56k.guru/pointer/ws");

        const pointerId = Math.random().toString(36).substr(2, 9);  // unique identifier for this pointer

        ws.onopen = function(event) {
            console.log("Connection established");
        };

        ws.onclose = function(event) {
            console.log("Connection closed");
        };

        ws.onerror = function(event) {
            console.error("WebSocket error observed:", event);
        };

        let mousePos = { x: 0, y: 0, id: pointerId };
        let lastPos = { x: 0, y: 0, id: pointerId };

        document.onmousemove = function(e) {
            mousePos.x = (e.clientX / window.innerWidth) * 100;
            mousePos.y = (e.clientY / window.innerHeight) * 100;
        }

        setInterval(function() {
            if(ws.readyState === ws.OPEN) {
                if (!lastPos || lastPos.x !== mousePos.x || lastPos.y !== mousePos.y) {
                    lastPos.x = mousePos.x
                    lastPos.y = mousePos.y
                    ws.send(JSON.stringify(mousePos));
                }
            }
        }, 150); // Send mouse position every second

        const cursors = {};

        ws.onmessage = function(event) {
            const positions = JSON.parse(event.data);
            positions.forEach((pos) => {
                if (pos.id === pointerId) return;  // skip own pointer

                let cursor = cursors[pos.id];
                if (!cursor) {
                    cursor = document.createElement('img');
                    cursor.src = '/img/cur/arrow.cur';
                    cursor.style.position = 'absolute';
                    document.body.appendChild(cursor);
                    cursors[pos.id] = cursor;
                }
                cursor.style.left = pos.x + '%';
                cursor.style.top = pos.y + '%';
            });

            // Slightly optimized cleanup, this should 
            // probably be made less frequent in a separate setInterval
            const positionIds = new Set(positions.map(pos => pos.id));

            Object.keys(cursors).forEach((id) => {
                if (!positionIds.has(id)) {
                    document.body.removeChild(cursors[id]);
                    delete cursors[id];
                }
            });
        };
    });
</script>